mod key_schedule {
    const CIPHER_ROUNDS: usize = 10;
    const INT_BITS: u8 = 32;
    const ROUND_CONSTANT: [u8; CIPHER_ROUNDS] = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

    const S_BOX: [u8; 256] =
        [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76
            , 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0
            , 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15
            , 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75
            , 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84
            , 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf
            , 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8
            , 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2
            , 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73
            , 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb
            , 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79
            , 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08
            , 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a
            , 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e
            , 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf
            , 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];


    /// A 128-bit key has 4 32-bit words
    pub type Word = u32;
    pub type Key = [Word; 4];

    /// Rotate a word by the specified amount of bits(8).
    fn rotate_word(word: Word, rot_bits: u8) -> Word {
        (word << rot_bits) | (word >> (INT_BITS - rot_bits))
    }

    /// Substitute a word byte by byte from a Nyberg S-box
    fn sub_word(word: Word) -> Word {
        let b0: u32 = S_BOX[(word >> 24 & 0xff) as usize] as u32;
        let b1: u32 = S_BOX[(word >> 16 & 0xff) as usize] as u32;
        let b2: u32 = S_BOX[(word >> 8 & 0xff) as usize] as u32;
        let b3: u32 = S_BOX[(word & 0xff) as usize] as u32;
        b0 << 24 | b1 << 16 | b2 << 8 | b3
    }

    /// XOR the round constant to a word
    fn apply_round_constant(word: Word, round: usize) -> Word {
        let round_const = (ROUND_CONSTANT[round as usize] as u32) << 24;
        word ^ round_const
    }

    /// Execute round steps for a given key
    fn execute_round(key: Key, round: usize) -> Key {
        let rotated = rotate_word(key[3], 8);
        let subbed = sub_word(rotated);
        let rconned = apply_round_constant(subbed, round);
        let w0 = rconned ^ key[0];
        let w1 = w0 ^ key[1];
        let w2 = w1 ^ key[2];
        let w3 = w2 ^ key[3];
        [w0, w1, w2, w3]
    }

    /// Expand a given key with 10 rounds.
    /// Returns an array with 11 128-bit keys.
    pub fn expand_key(key: Key) -> [Key; CIPHER_ROUNDS+1]
    {
        let mut round_keys: [Key; CIPHER_ROUNDS+1] = [[0,0,0,0]; CIPHER_ROUNDS+1];
        round_keys[0] = key;

        for round in 0..CIPHER_ROUNDS {
            round_keys[round+1] = execute_round(round_keys[round], round);
        }

        round_keys
    }


#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn rotate_word_left_by_8bits() {
        assert_eq!(rotate_word(0x01000000, 8), 0x00000001);
        assert_eq!(rotate_word(0x01010000, 8), 0x01000001);
        assert_eq!(rotate_word(0x21210000, 8), 0x21000021);
        assert_eq!(rotate_word(0x00002121, 8), 0x00212100);
        assert_eq!(rotate_word(0x3333ffff, 8), 0x33ffff33);
    }

    #[test]
    fn sub_word_tests() {
        assert_eq!(sub_word(0x01000000), 0x7c636363);
        assert_eq!(sub_word(0x01010101), 0x7c7c7c7c);
        assert_eq!(sub_word(0x40404040), 0x09090909);
        assert_eq!(sub_word(0xffffffff), 0x16161616);
    }

    #[test]
    fn apply_round_consts() {
        assert_eq!(apply_round_constant(0x01000000, 0), 0x00000000);
        assert_eq!(apply_round_constant(0x01000000, 1), 0x03000000);
        assert_eq!(apply_round_constant(0x01000000, 2), 0x05000000);
        assert_eq!(apply_round_constant(0x01000000, 3), 0x09000000);

        assert_eq!(apply_round_constant(0xff000000, 0), 0xfe000000);
        assert_eq!(apply_round_constant(0xff000000, 1), 0xfd000000);
        assert_eq!(apply_round_constant(0xff000000, 2), 0xfb000000);
        assert_eq!(apply_round_constant(0xff000000, 3), 0xf7000000);
    }

    #[test]
    fn round() {
        let key: Key = [0x0, 0x0, 0x0, 0x1];
        let res = execute_round(key, 0);
        assert_eq!(res, [0x62637c63,
            0x62637c63,
            0x62637c63,
            0x62637c62]);
    }

    #[test]
    fn expand() {
        let key: Key = [0x0, 0x0, 0x0, 0x1];
        let res = expand_key(key);
        assert_eq!(res[0], key);
        assert_eq!(res[1], [0x62637c63,
            0x62637c63,
            0x62637c63,
            0x62637c62]);
        assert_eq!(res[2], [0x9b73d6c9,
            0xf910aaaa,
            0x9b73d6c9,
            0xf910aaab]);
        assert_eq!(res[10], [0xc477f00f,
            0xb3b8ec07,
            0x1a8b8d29,
            0x6663bda6]);
    }

}
}
